on:
  push:
    tags:
    - 'v*'

name: Create release and build artifacts

jobs:



  build_lin:
    name: Build Ubuntu artifacts
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare Ubuntu tools
        run: |
          sudo apt update
          sudo apt install -y git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
      - name: Checkout code
        uses: actions/checkout@master
      - name: Build project on Ubuntu
        run: |
          cmake .
          make -j$(nproc)
          cp src/config.json .
          tar cfz ubuntu_build.tar.gz tensorflow config.json
      - name: Upload Ubuntu build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ubuntu_build
          path: ubuntu_build.tar.gz



  deploy:
    needs: [build_lin]
    name: Create release and upload artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Set version
        id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF:10}
      - name: Download Ubuntu build artifacts
        uses: actions/download-artifact@v1
        with:
          name: ubuntu_build

      - name: Download CentOS 7 build artifacts
        uses: actions/download-artifact@v1
        with:
          name: centos7_build
      - name: Upload Ubuntu build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu_build/ubuntu_build.tar.gz
          asset_name: xmrig-${{steps.version.outputs.VERSION}}-lin64.tar.gz
          asset_content_type: application/zip
      - name: Upload MacOS build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos_build/macos_build.tar.gz
          asset_name: xmrig-${{steps.version.outputs.VERSION}}-mac64.tar.gz
          asset_content_type: application/zip
      - name: Upload CentOS 7 build release asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: centos7_build/centos7_build.tar.gz
          asset_name: xmrig-${{steps.version.outputs.VERSION}}-lin64-compat.tar.gz
          asset_content_type: application/zip
      - name: Update xmrig_setup repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/C3Pool/xmrig_setup.git
          cd xmrig_setup
          git config user.name  C3Pool
          git config user.email C3Pool@outlook.com
          cp ../centos7_build/centos7_build.tar.gz xmrig.tar.gz
          cp ../windows_build/windows_build.zip xmrig.zip
          unzip xmrig.zip
          zip -u offline_miner_setup.zip xmrig.exe config.json WinRing0x64.sys
          git commit -m "xmrig "${GITHUB_REF:10}" based release" xmrig.tar.gz xmrig.zip offline_miner_setup.zip
          git push
          cd ..
      - name: Update hiveos repo
        run: |
          git clone https://$GITHUB_ACTOR:${{secrets.xmrig_setup_key}}@github.com/C3Pool/hiveos.git
          cd hiveos
          git config user.name  C3Pool
          git config user.email C3Pool@outlook.com
          tar xf ../centos7_build/centos7_build.tar.gz
          mv xmrig cat_xmrig/xmrig
          mv config.json cat_xmrig/config_global.json
          export VER=${GITHUB_REF:10}
          export VER=${VER//-/_}
          tar -zcvf cat_xmrig-$VER.tar.gz cat_xmrig
          git add cat_xmrig-$VER.tar.gz cat_xmrig/xmrig cat_xmrig/config_global.json
          git commit -m "xmrig "${GITHUB_REF:10}" based release" cat_xmrig-$VER.tar.gz
          git push
